План развития проекта образовательного портала

На текущий момент образовательный портал имеет зачатки базового функционал. Можно добавлять и упарвлять курсами и пользователями.
В дальнейшем необходимо добавить функционал аутентификации и авторизации пользователей, возможность добавлять контент и многое другое.
Кроме того проект испытывает ряд архитектурных проблем.

На сегодняшний день проект написан в рамках монолитной архитектуры, в сущности проект является "божественным объектом",
в рамках одного приложения решаются все задачи. Это приводит к размытию отвественности, усложняет и, в конечном счете размывает
структуру проекта. Усугубление этой ситуации приведет к лавинообразному росту проблем во время роста.
Масштабируемость, поддержка и развитие проекта целесообразно осуществлять в рамках микросервисной архитектуры.

Для разделение на микросервисы целесообразно использовать подход "Domain Driven Design". Суть подхода в том, что мы
разделяем приложение на "предметные области" (Domains) по логическому признаку. В нашем случае имеет смысл выделить области:
 - Портал. Основной интерфейс пользователя. Как ученика, так и преподавателя. Профили, рабочие интерфейсы, расписание и прочее.
 - Платежный сервис. Обеспечивает взаимодействие с платежными системами. Необходимо отделить от основного портала поскольку,
 этому сервису тербуется более высокий уровень безопасности. Практика развертывания плтежной системы с осоновным приложением может
 привести к компроментации финансовых данных или даже прямой потере денег, в случае компроментации основного приложения. Кроме того
 платежный сервис не требует масштабов соразмерных масштабам основного паортала, нагрузка существенно меньше
 - Хранилище материалов. Имеет смысл вынести тяжелые учебные материалы(видео, архивы, документы, книги) на отдельный
 сервис и предоставлять доступ по API
 - Сервис нормализации. Имеет смысл нормализовать материалы до хранения. Для сжатия видео и унификации архивов нужным сервера
 с мощным процессором и большим количеством RAM. В то время, как для хранения требуется большие диски с невысокой скоростью
 доступа и высокой надежностью.
 - С ростом количества сервисов, неизбежно встанет вопрос, о выделении сервиса авторизации и аутентификации в отдельный микросервис
 - Брокер сообщений. Условно можно выделить в отдельный микросервис
 - В рамках развития проекта неизбежно появятся другие микросервисы. которые не предусмотренны данным докладом

В рамках будущей архитектуры взаимодействие микросервисов будет происходить как синхронно, так и асинхронно. Основной подход - REST

Взаимодействие между веб-порталом и плтежным сервисом должно происходить по синхронной схеме. Оплата - достаточно быстрый процесс,
ожидание не составит большой проблемы. С другой стороны в случае проблем с оплатой пользователь сразу узнает о ней. REST

Материалы загружаемые на хранилище должны проходить нормализацию, прозрачно для пользователя. После загрузки файла, сервис
сам должен определить тип контента и произветси необходимые действия. Сжатие видео, как и другие операции, может занять большое количество
времени. Это операция должна быть асинхронной. REST для метаданных, небольшие файлы - простым POST. Проблема загрузки гигантских
файлов (>1Гб) требует дополнительной проработки

Аутентификаия и авторизация, обязана быть синхронной. Подход REST полностью уместен.

Отраслевым стандартом для брокера сообщений является протокол AMQP, RabbitMQ - одна из наиблолее популярных реализаиций.
Брокер необходим для обеспечения асинхронного взамодействия и отложенных вычилений (например Нормализация данных, почтовые рассылки).





