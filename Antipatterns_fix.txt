В этом файле описаны фиксы антипаттернов в рамках задания к 8-му уроку.

---
Директория logs была прямо указана в коде дял логирования.
Антипаттерны:
1. HardCode

Решение:
Добавить класс Config(metaclass=Singleton). Объект которого считывает при инициализации из конфигурационной директории параметры (пока это только директория для хранения файлов),
хранит их и обеспечиает доступ

В решении были учтены антипаттерны:
1. Mutilation - Класс создан расширяемым, в дальнейшем могут быть длобавлены новые параметры без существеннго изменения интерфейса класса.
2. Проверка параметра конфигурационной диретории сделана через try-except
3. Blind Faith/Improbabilty Factor. Сделана проверка параметра конфиг директории. Это позволит избежать поломки и не ксосистентности, в случае
повторного обращения к объекту с параметром confdir

Возможно допущенные антипаттерны:
1. SoftCode - вероятно, не возникнет необходимости менять папку с логами. Если возникнет, то это можно решить средствами системы.
2. Размывание ответственности, неконситентность настроек. Сейчас в коде есть две реализации записи лога в файл. Класс WindyLogger и один из классов Observer. Изменения внесены только в Observer.
В дальнейшем нужно объединить эти реализации. Переписать WindyLogger с использованием интсркментария Observer

---

Для проверки наличия элемента в списке использован if
Антипаттерн:
1. Python bad code style

Решение:
Переписать с использованием Try-except