В этом файле описаны фиксы антипаттернов в рамках задания к 8-му уроку.

---
Директория logs была прямо указана в коде дял логирования.
Антипаттерны:
1. HardCode

Решение:
Добавить класс Config(metaclass=Singleton). Объект которого считывает при инициализации из конфигурационной директории параметры (пока это только директория для хранения файлов),
хранит их и обеспечиает доступ

В решении были учтены антипаттерны:
1. Mutilation - Класс создан расширяемым, в дальнейшем могут быть длобавлены новые параметры без существеннго изменения интерфейса класса.
2. Проверка параметра конфигурационной диретории сделана через try-except
3. Blind Faith/Improbabilty Factor. Сделана проверка параметра конфиг директории. Это позволит избежать поломки и не ксосистентности, в случае
повторного обращения к объекту с параметром confdir

Возможно допущенные антипаттерны:
1. SoftCode - вероятно, не возникнет необходимости менять папку с логами. Если возникнет, то это можно решить средствами системы.
2. Размывание ответственности, неконситентность настроек. Сейчас в коде есть две реализации записи лога в файл. Класс WindyLogger и один из классов Observer. Изменения внесены только в Observer.
В дальнейшем нужно объединить эти реализации. Переписать WindyLogger с использованием интсркментария Observer

---

Для проверки наличия элемента в списке использован if
Антипаттерн:
1. Python bad code style

Решение:
Переписать с использованием Try-except

---
Множественные проверки на существование в модуле Views.
Антипаттерн:
1. Python bad code style

Решение:
Переписать с использованием Try-except

Часть из них имеет смысл переписать с использованием try-except.

---
CategoryMapper и CourseMapper имеют много общего кода. Изменение или правки в коде придется делать в двух местах, если понадобится.

Антипаттерны:
1. CourseMapper написан с помощью CopyPaste из CategoryMapper.
2. Нарушен принцип DRY

Решение:
Создать дополнительный класс CatalogueMapper и вынести в него повторяющиеся участки кода, сделать наследование от него

Возможно допущенные антипаттерны:
1. Premature Optimization. Возможно стоит принимать решение о рефакторинге после реализации UserMapper. Это позволит лучше понять,
какую часть кода выносить в промежуточный класс (если он понадобится), а какую в Родительский класс Mapper

---
Реализация функции create_connection позволяла создавать множественные соединения к одной БД. Это могло привести к ряду проблем. Первичная реализация пригодна для прототипирования или
учебного проекта, но не более того.

Антипаттерн:
1. Размывание ответственности. За единую функцию доступ к БД могли отвечать разные объекты.
2. Poltergeist. В отдельных случаях, race condition при доступе к файлу БД могли приводить к непредвиденным сбоям.

Решение:
Создать Singleton класс для соединения с БД

Возможно допущенные антипаттерны:
1. Premature Optimization. Возможно на данном этапе не существенная проблема. Возможно стоит делать более сложные реализации после анедрения поддержки других БД (mysql, postgresql итд).
В данный момент трудно определить иерархию классов для БД, ответственность классов их интерфейсы. Поэтому текущая реализация так же не пригодна для скрьезного использования
и только иллюстрирует концепт.

